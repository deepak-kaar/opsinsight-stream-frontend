import { HttpClient } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { catchError, map, Observable, timeout } from 'rxjs';
import { environment } from 'src/environments/environment';
import { fontFamily, fontWeight, justifyOption, Widget } from 'src/app/modules/page-administrator/interfaces/page-administrator';
import { BaseApiService } from 'src/app/core/services/base-api/base-api.service';
import { API_ENDPOINTS } from 'src/app/core/config/api-endpoint.config';

/**
 * @service PageAdministratorService
 * This service manages the http backend calls for the page administrator module. 
 */

@Injectable({
  providedIn: 'root'
})
export class PageAdministratorService extends BaseApiService {

  override http = inject(HttpClient)
  override baseUrl: string = environment.apiUrl; // base api_url

  get_app_list: string = this.baseUrl + 'app/getApp'; // string to store the get app list url
  get_org_list_by_app: string = this.baseUrl + 'organization/getOrgByAppId/' // string to store the get orgs list by app id url
  get_entity_list: string = this.baseUrl + 'entity/getEntity'; // url to fetch the entity list
  get_entity_details: string = this.baseUrl + 'entity/getEntityOrInstance/'; //url to fetch the entity details
  post_widget_mapping: string = this.baseUrl + 'idt/odtMapping'; //url to post the odt
  update_emitter_mapping: string = this.baseUrl + 'idt/updateEmitterId'; // url to update emitter
  get_attribute_list: string = this.baseUrl + 'entity/getAttributes'; // url to fetch the attributes
  get_template_list: string = this.baseUrl + 'template/getTemplate/'; // url to fecth the template list
  get_idt_list: string = this.baseUrl + 'idt/getIdtList'; // string to store the url which fetches the list of IDT
  get_idt_versions: string = this.baseUrl + 'idt/getIdtVersions';
  prompt_llm: string = this.baseUrl + 'llm/postPrompt1';
  get_org_list: string = this.baseUrl + 'organization/getOrg';

  getAllWidgtes(): Widget[] {
    return [
      {
        category: 'Form Fields',
        value: '0',
        items: [
          {
            type: 'label',
            label: 'Label',
            icon: `<svg width="18" height="16" viewBox="0 0 20 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2 16C1.45 16 0.979333 15.8043 0.588 15.413C0.196667 15.0217 0.000666667 14.5507 0 14V2C0 1.45 0.196 0.979333 0.588 0.588C0.98 0.196666 1.45067 0.000666667 2 0H13C13.3167 0 13.6167 0.0709998 13.9 0.213C14.1833 0.355 14.4167 0.550667 14.6 0.8L20 8L14.6 15.2C14.4167 15.45 14.1833 15.646 13.9 15.788C13.6167 15.93 13.3167 16.0007 13 16H2ZM2 14H13L17.5 8L13 2H2V14Z" fill="#323232"/></svg>`,
          },
          {
            type: 'paragraph',
            label: 'Paragraph',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 4.5H21M12 9.5H21M3 14.5H21M3 19.5H21M3 4.5H8V9.5H3V4.5Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`,
          },
          {
            type: 'text-area',
            label: 'Text area',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_1141_397)"><path d="M2.25003 3.75C2.25003 3.15326 2.48708 2.58097 2.90904 2.15901C3.331 1.73705 3.90329 1.5 4.50003 1.5H19.5C20.0968 1.5 20.6691 1.73705 21.091 2.15901C21.513 2.58097 21.75 3.15326 21.75 3.75V9.0945C22.3947 9.26025 22.9659 9.63567 23.3738 10.1617C23.7816 10.6877 24.003 11.3344 24.003 12C24.003 12.6656 23.7816 13.3123 23.3738 13.8383C22.9659 14.3643 22.3947 14.7398 21.75 14.9055V20.25C21.75 20.8467 21.513 21.419 21.091 21.841C20.6691 22.2629 20.0968 22.5 19.5 22.5H4.50003C3.90329 22.5 3.331 22.2629 2.90904 21.841C2.48708 21.419 2.25003 20.8467 2.25003 20.25V14.9055C1.60539 14.7398 1.03417 14.3643 0.626298 13.8383C0.218428 13.3123 -0.00292969 12.6656 -0.00292969 12C-0.00292969 11.3344 0.218428 10.6877 0.626298 10.1617C1.03417 9.63567 1.60539 9.26025 2.25003 9.0945V3.75ZM3.75003 9.0945C4.39467 9.26025 4.96589 9.63567 5.37376 10.1617C5.78163 10.6877 6.00299 11.3344 6.00299 12C6.00299 12.6656 5.78163 13.3123 5.37376 13.8383C4.96589 14.3643 4.39467 14.7398 3.75003 14.9055V20.25C3.75003 20.4489 3.82905 20.6397 3.9697 20.7803C4.11035 20.921 4.30112 21 4.50003 21H19.5C19.6989 21 19.8897 20.921 20.0304 20.7803C20.171 20.6397 20.25 20.4489 20.25 20.25V14.9055C19.6054 14.7398 19.0342 14.3643 18.6263 13.8383C18.2184 13.3123 17.9971 12.6656 17.9971 12C17.9971 11.3344 18.2184 10.6877 18.6263 10.1617C19.0342 9.63567 19.6054 9.26025 20.25 9.0945V3.75C20.25 3.55109 20.171 3.36032 20.0304 3.21967C19.8897 3.07902 19.6989 3 19.5 3H4.50003C4.30112 3 4.11035 3.07902 3.9697 3.21967C3.82905 3.36032 3.75003 3.55109 3.75003 3.75V9.0945ZM3.00003 10.5C2.60221 10.5 2.22067 10.658 1.93937 10.9393C1.65806 11.2206 1.50003 11.6022 1.50003 12C1.50003 12.3978 1.65806 12.7794 1.93937 13.0607C2.22067 13.342 2.60221 13.5 3.00003 13.5C3.39785 13.5 3.77939 13.342 4.06069 13.0607C4.34199 12.7794 4.50003 12.3978 4.50003 12C4.50003 11.6022 4.34199 11.2206 4.06069 10.9393C3.77939 10.658 3.39785 10.5 3.00003 10.5ZM21 10.5C20.6022 10.5 20.2207 10.658 19.9394 10.9393C19.6581 11.2206 19.5 11.6022 19.5 12C19.5 12.3978 19.6581 12.7794 19.9394 13.0607C20.2207 13.342 20.6022 13.5 21 13.5C21.3979 13.5 21.7794 13.342 22.0607 13.0607C22.342 12.7794 22.5 12.3978 22.5 12C22.5 11.6022 22.342 11.2206 22.0607 10.9393C21.7794 10.658 21.3979 10.5 21 10.5Z" fill="#323232"/><path d="M17.151 6H6.849L6.75 8.991H7.329C7.644 7.113 8.247 6.822 10.5885 6.7485L11.103 6.732V16.2465C11.103 17.052 10.929 17.244 9.5295 17.3685V18H14.4705V17.3685C13.0635 17.244 12.8895 17.0535 12.8895 16.2465V6.732L13.4115 6.747C15.7515 6.822 16.356 7.113 16.671 8.991H17.25L17.151 6Z" fill="#323232"/>
</g>
<defs>
<clipPath id="clip0_1141_397">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>
</svg>
`,
          },
          {
            type: 'checkbox',
            label: 'Checkbox',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.5 8.25L10.2 15.75L7.5 12.75" stroke="#323232" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M18.75 3H5.25C4.00736 3 3 4.00736 3 5.25V18.75C3 19.9926 4.00736 21 5.25 21H18.75C19.9926 21 21 19.9926 21 18.75V5.25C21 4.00736 19.9926 3 18.75 3Z" stroke="#323232" stroke-width="2.5" stroke-linejoin="round"/>
</svg>
`,
          },
          {
            type: 'date-picker',
            label: 'Date Picker',
            icon: `<svg width="16" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.872 10.4955C5.16977 10.4955 5.45535 10.3772 5.6659 10.1667C5.87646 9.9561 5.99475 9.67052 5.99475 9.37275C5.99475 9.07498 5.87646 8.7894 5.6659 8.57885C5.45535 8.36829 5.16977 8.25 4.872 8.25C4.57423 8.25 4.28865 8.36829 4.0781 8.57885C3.86754 8.7894 3.74925 9.07498 3.74925 9.37275C3.74925 9.67052 3.86754 9.9561 4.0781 10.1667C4.28865 10.3772 4.57423 10.4955 4.872 10.4955ZM5.9955 13.1235C5.9955 13.4213 5.87721 13.7068 5.66665 13.9174C5.4561 14.128 5.17052 14.2463 4.87275 14.2463C4.57498 14.2463 4.2894 14.128 4.07885 13.9174C3.86829 13.7068 3.75 13.4213 3.75 13.1235C3.75 12.8257 3.86829 12.5402 4.07885 12.3296C4.2894 12.119 4.57498 12.0007 4.87275 12.0007C5.17052 12.0007 5.4561 12.119 5.66665 12.3296C5.87721 12.5402 5.9955 12.8257 5.9955 13.1235ZM9 10.4955C9.29777 10.4955 9.58335 10.3772 9.7939 10.1667C10.0045 9.9561 10.1227 9.67052 10.1227 9.37275C10.1227 9.07498 10.0045 8.7894 9.7939 8.57885C9.58335 8.36829 9.29777 8.25 9 8.25C8.70223 8.25 8.41665 8.36829 8.2061 8.57885C7.99554 8.7894 7.87725 9.07498 7.87725 9.37275C7.87725 9.67052 7.99554 9.9561 8.2061 10.1667C8.41665 10.3772 8.70223 10.4955 9 10.4955ZM10.1235 13.1235C10.1235 13.4213 10.0052 13.7068 9.79465 13.9174C9.5841 14.128 9.29852 14.2463 9.00075 14.2463C8.70298 14.2463 8.4174 14.128 8.20685 13.9174C7.99629 13.7068 7.878 13.4213 7.878 13.1235C7.878 12.8257 7.99629 12.5402 8.20685 12.3296C8.4174 12.119 8.70298 12.0007 9.00075 12.0007C9.29852 12.0007 9.5841 12.119 9.79465 12.3296C10.0052 12.5402 10.1235 12.8257 10.1235 13.1235ZM13.1235 10.4955C13.4213 10.4955 13.7068 10.3772 13.9174 10.1667C14.128 9.9561 14.2463 9.67052 14.2463 9.37275C14.2463 9.07498 14.128 8.7894 13.9174 8.57885C13.7068 8.36829 13.4213 8.25 13.1235 8.25C12.8257 8.25 12.5402 8.36829 12.3296 8.57885C12.119 8.7894 12.0007 9.07498 12.0007 9.37275C12.0007 9.67052 12.119 9.9561 12.3296 10.1667C12.5402 10.3772 12.8257 10.4955 13.1235 10.4955ZM18 3.75C18 2.75544 17.6049 1.80161 16.9016 1.09835C16.1984 0.395088 15.2446 0 14.25 0H3.75C2.75544 0 1.80161 0.395088 1.09835 1.09835C0.395088 1.80161 0 2.75544 0 3.75V14.25C0 15.2446 0.395088 16.1984 1.09835 16.9016C1.80161 17.6049 2.75544 18 3.75 18H14.25C15.2446 18 16.1984 17.6049 16.9016 16.9016C17.6049 16.1984 18 15.2446 18 14.25V3.75ZM1.5 6H16.5V14.25C16.5 14.8467 16.2629 15.419 15.841 15.841C15.419 16.2629 14.8467 16.5 14.25 16.5H3.75C3.15326 16.5 2.58097 16.2629 2.15901 15.841C1.73705 15.419 1.5 14.8467 1.5 14.25V6ZM3.75 1.5H14.25C14.8467 1.5 15.419 1.73705 15.841 2.15901C16.2629 2.58097 16.5 3.15326 16.5 3.75V4.5H1.5V3.75C1.5 3.15326 1.73705 2.58097 2.15901 2.15901C2.58097 1.73705 3.15326 1.5 3.75 1.5Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'dropdown',
            label: 'Dropdown',
            icon: `<svg width="18" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 0H20V7H0V0ZM2 2V5H18V2H2ZM2 9V18H18V9H20V20H0V9H2ZM4 10H16V12H4V10ZM4 14H16V16H4V14Z" fill="#323232"/>
</svg>
`,
          },

          {
            type: 'input-text',
            label: 'Input',
            icon: `<svg width="20" height="12" viewBox="0 0 24 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M24 1.5C24 0.6 23.4 0 22.5 0H1.5C0.6 0 0 0.6 0 1.5V10.5C0 11.4 0.6 12 1.5 12H22.5C23.4 12 24 11.4 24 10.5V1.5ZM22.5 10.5H1.5V1.5H22.5V10.5Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'radio-button',
            label: 'Radio Button',
            icon: `<svg width="18" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 20C4.477 20 0 15.523 0 10C0 4.477 4.477 0 10 0C15.523 0 20 4.477 20 10C20 15.523 15.523 20 10 20ZM10 18C12.1217 18 14.1566 17.1571 15.6569 15.6569C17.1571 14.1566 18 12.1217 18 10C18 7.87827 17.1571 5.84344 15.6569 4.34315C14.1566 2.84285 12.1217 2 10 2C7.87827 2 5.84344 2.84285 4.34315 4.34315C2.84285 5.84344 2 7.87827 2 10C2 12.1217 2.84285 14.1566 4.34315 15.6569C5.84344 17.1571 7.87827 18 10 18ZM10 15C8.67392 15 7.40215 14.4732 6.46447 13.5355C5.52678 12.5979 5 11.3261 5 10C5 8.67392 5.52678 7.40215 6.46447 6.46447C7.40215 5.52678 8.67392 5 10 5C11.3261 5 12.5979 5.52678 13.5355 6.46447C14.4732 7.40215 15 8.67392 15 10C15 11.3261 14.4732 12.5979 13.5355 13.5355C12.5979 14.4732 11.3261 15 10 15Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'file-upload',
            label: 'File upload',
            icon: `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7 12V3.85L4.4 6.45L3 5L8 0L13 5L11.6 6.45L9 3.85V12H7ZM2 16C1.45 16 0.979333 15.8043 0.588 15.413C0.196666 15.0217 0.000666667 14.5507 0 14V11H2V14H14V11H16V14C16 14.55 15.8043 15.021 15.413 15.413C15.0217 15.805 14.5507 16.0007 14 16H2Z" fill="#323232"/>
</svg>
`,
          }
        ],
      },

      {
        category: 'Buttons',
        value: '1',
        items: [
          {
            type: 'btn',
            label: 'Button',
            icon: `<svg width="20" height="12" viewBox="0 0 22 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M19.4 0H2.59995C1.27995 0 0.199951 1.08 0.199951 2.4V9.6C0.199951 10.92 1.27995 12 2.59995 12H19.4C20.7199 12 21.7999 10.92 21.7999 9.6V2.4C21.7999 1.08 20.7199 0 19.4 0ZM20.6 8.4C20.6 9.12 20.1199 9.6 19.4 9.6H2.59995C1.87995 9.6 1.39995 9.12 1.39995 8.4V2.4C1.39995 1.68 1.87995 1.2 2.59995 1.2H19.4C20.1199 1.2 20.6 1.68 20.6 2.4V8.4Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'btn-icon',
            label: 'Icon Button',
            icon: `<svg width="17" height="11" viewBox="0 0 19 11" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M17.2222 2H4.77778C3.8 2 3 2.81 3 3.8V9.2C3 10.19 3.8 11 4.77778 11H17.2222C18.2 11 19 10.19 19 9.2V3.8C19 2.81 18.2 2 17.2222 2ZM18.1111 8.3C18.1111 8.84 17.7556 9.2 17.2222 9.2H4.77778C4.24444 9.2 3.88889 8.84 3.88889 8.3V3.8C3.88889 3.26 4.24444 2.9 4.77778 2.9H17.2222C17.7556 2.9 18.1111 3.26 18.1111 3.8V8.3Z" fill="#323232"/>
<rect x="0.699951" y="0.5" width="14.5" height="7.5" fill="white"/>
<path d="M14.2222 0.0556641H1.77778C0.8 0.0556641 0 0.855664 0 1.83344V7.16678C0 8.14455 0.8 8.94455 1.77778 8.94455H14.2222C15.2 8.94455 16 8.14455 16 7.16678V1.83344C16 0.855664 15.2 0.0556641 14.2222 0.0556641ZM15.1111 6.27789C15.1111 6.81122 14.7556 7.16678 14.2222 7.16678H1.77778C1.24444 7.16678 0.888889 6.81122 0.888889 6.27789V1.83344C0.888889 1.30011 1.24444 0.944553 1.77778 0.944553H14.2222C14.7556 0.944553 15.1111 1.30011 15.1111 1.83344V6.27789Z" fill="#323232"/>
</svg>
`,
          },
          //           {
          //             type: 'primeng-btn-grp',
          //             label: 'Button Group',
          //             icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          // <path d="M20.4 6H3.59995C2.27995 6 1.19995 7.08 1.19995 8.4V15.6C1.19995 16.92 2.27995 18 3.59995 18H20.4C21.7199 18 22.7999 16.92 22.7999 15.6V8.4C22.7999 7.08 21.7199 6 20.4 6ZM21.6 14.4C21.6 15.12 21.1199 15.6 20.4 15.6H3.59995C2.87995 15.6 2.39995 15.12 2.39995 14.4V8.4C2.39995 7.68 2.87995 7.2 3.59995 7.2H20.4C21.1199 7.2 21.6 7.68 21.6 8.4V14.4Z" fill="#323232"/>
          // <path d="M11.875 9H13.125V10.875H15V12.125H13.125V14H11.875V12.125H10V10.875H11.875V9Z" fill="#323232"/>
          // </svg>
          // `,
          //           },
        ],
      },
      {
        category: 'Table',
        value: '2',
        items: [
          {
            type: 'primeng-dynamic-table',
            label: 'Dynamic Table',
            icon: `<svg width="19" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M17 9V10.5C19.21 10.5 21 12.29 21 14.5C21 15.32 20.76 16.08 20.33 16.71L19.24 15.62C19.41 15.28 19.5 14.9 19.5 14.5C19.5 13.837 19.2366 13.2011 18.7678 12.7322C18.2989 12.2634 17.663 12 17 12V13.5L14.75 11.25L17 9ZM17 20V18.5C14.79 18.5 13 16.71 13 14.5C13 13.68 13.25 12.92 13.67 12.29L14.76 13.38C14.59 13.72 14.5 14.1 14.5 14.5C14.5 15.163 14.7634 15.7989 15.2322 16.2678C15.7011 16.7366 16.337 17 17 17V15.5L19.25 17.75L17 20ZM2 0H16C16.5304 0 17.0391 0.210714 17.4142 0.585786C17.7893 0.960859 18 1.46957 18 2V8H17.5C15.66 8 14 8.77 12.81 10H10V14H11V14.5C11 15 11.06 15.5 11.17 16H2C1.46957 16 0.960859 15.7893 0.585786 15.4142C0.210714 15.0391 0 14.5304 0 14V2C0 0.9 0.9 0 2 0ZM2 4V8H8V4H2ZM10 4V8H16V4H10ZM2 10V14H8V10H2Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'static-table',
            label: 'Static Table',
            icon: `<svg width="19" height="19" viewBox="0 0 21 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16 11H18V14H21V16H18V19H16V16H13V14H16V11ZM2 0H16C16.5304 0 17.0391 0.210714 17.4142 0.585786C17.7893 0.960859 18 1.46957 18 2V9.08C16.4954 8.8262 14.9506 9.15518 13.68 10H10V14H11.08C10.97 14.68 10.97 15.35 11.08 16H2C1.46957 16 0.960859 15.7893 0.585786 15.4142C0.210714 15.0391 0 14.5304 0 14V2C0 1.46957 0.210714 0.960859 0.585786 0.585786C0.960859 0.210714 1.46957 0 2 0ZM2 4V8H8V4H2ZM10 4V8H16V4H10ZM2 10V14H8V10H2Z" fill="#323232"/>
</svg>
`,
          },
        ],
      },
      {
        category: 'Charts',
        value: '3',
        items: [
          {
            type: 'pie-chart',
            label: 'Piechart',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M13.249 -1H14.1989C17.2222 -1 20.1216 0.201954 22.2594 2.34144C24.3971 4.48094 25.5981 7.38271 25.5981 10.4084V11.3591H13.249V-1ZM11.3434 -1V13.2662H25.6L25.429 14.3614C24.9093 17.6682 23.1633 20.6575 20.5392 22.7332C17.9151 24.8088 14.6057 25.8183 11.2709 25.5604C7.93606 25.3025 4.8209 23.7961 2.54658 21.3416C0.27226 18.8871 -0.994107 15.6649 -1 12.3174C-0.999393 9.14343 0.134531 6.07415 2.19723 3.66323C4.25992 1.25231 7.11559 -0.341529 10.2491 -0.830775L11.3434 -1ZM9.44355 13.907V1.27408C7.46579 1.78701 5.66212 2.8225 4.22128 4.27218C2.78044 5.72187 1.75539 7.53247 1.25338 9.51453C0.75137 11.4966 0.79086 13.5773 1.36772 15.5388C1.94457 17.5003 3.03759 19.2707 4.5324 20.6646L9.44355 13.907ZM6.0295 21.8415C7.54409 22.8386 9.27446 23.4597 11.077 23.6534C12.8795 23.8471 14.7022 23.6077 16.3937 22.9552C18.0853 22.3026 19.5969 21.2557 20.8032 19.9013C22.0095 18.5469 22.8756 16.9241 23.3297 15.1676H10.878L6.0295 21.8415Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'donut-chart',
            label: 'Donut',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.7386 1.61346C20.0294 3.02233 22.7555 7.66191 22.7982 11.6115C22.7218 11.6684 22.633 11.6441 22.5494 11.6442C20.6284 11.6468 18.7073 11.6458 16.7863 11.6532C16.6137 11.6538 16.5563 11.5895 16.5315 11.4311C16.2159 9.41932 14.7653 7.92602 12.781 7.57503C12.0528 7.44622 11.3336 7.51169 10.6338 7.74504C10.4389 7.81005 10.3429 7.76978 10.2512 7.58486C9.40492 5.87825 8.55245 4.17468 7.69434 2.47399C7.59805 2.28314 7.61541 2.20434 7.82654 2.11678C9.24354 1.52916 10.7152 1.22858 12.2485 1.25893C13.0844 1.27548 13.9107 1.38945 14.7386 1.61346Z" fill="#323232"/>
<path d="M10.1188 22.6572C6.32997 21.8774 3.66809 19.7168 2.10618 16.2113C1.61417 15.1071 1.36233 13.9352 1.29081 12.7222C1.12998 9.995 1.90395 7.55972 3.55606 5.39993C4.42076 4.26951 5.49619 3.37242 6.72839 2.66255C6.76775 2.63987 6.81214 2.62591 6.84845 2.61035C6.93599 2.6548 6.95509 2.73578 6.98893 2.80338C7.83815 4.50021 8.68179 6.19987 9.53886 7.89272C9.65159 8.11538 9.6126 8.22336 9.41629 8.36526C8.40789 9.09417 7.78858 10.0799 7.57996 11.3063C7.17563 13.6831 8.74761 15.9926 11.1235 16.4816C11.6413 16.5881 11.6423 16.5826 11.6425 17.1121C11.6431 18.9241 11.6438 20.7362 11.6444 22.5482C11.6445 22.8352 11.6452 22.8259 11.3448 22.8057C10.9399 22.7784 10.5378 22.7337 10.1188 22.6572ZM3.71211 6.68617C1.72921 9.98131 1.54817 13.3734 3.35769 16.7678C4.92012 19.6988 7.45298 21.3454 10.7084 21.8802C10.7983 21.7642 10.7728 21.667 10.7729 21.5763C10.7747 20.2566 10.7684 18.9369 10.7795 17.6173C10.7815 17.3809 10.7083 17.281 10.4791 17.2113C7.91896 16.433 6.29628 13.8832 6.69822 11.2651C6.8918 10.0043 7.45384 8.92734 8.40243 8.06498C8.52914 7.94979 8.54559 7.85979 8.4686 7.70756C7.85565 6.49547 7.2513 5.27902 6.643 4.06457C6.60585 3.99042 6.58552 3.89988 6.47157 3.86078C5.36649 4.59672 4.46149 5.54129 3.71211 6.68617Z" fill="#323232"/>
<path d="M16.4172 13.2327C16.4545 13.0777 16.4871 12.9412 16.5159 12.8039C16.5899 12.4511 16.5892 12.4504 16.9559 12.4504C18.8152 12.4504 20.6746 12.4534 22.5339 12.4473C22.7507 12.4466 22.8238 12.4834 22.8068 12.7323C22.4723 17.656 18.8943 21.7249 14.0733 22.6434C13.5985 22.7339 13.1176 22.7854 12.6347 22.8185C12.4978 22.8279 12.4459 22.7798 12.4497 22.6513C12.4506 22.62 12.4494 22.5888 12.4494 22.5575C12.4498 20.6591 12.4536 18.7606 12.4461 16.8622C12.4452 16.6372 12.5134 16.5634 12.739 16.5205C14.6108 16.1642 15.8429 15.0774 16.4172 13.2327ZM13.3202 20.8823C13.3202 21.2044 13.3202 21.5265 13.3202 21.8527C18.0251 21.3049 21.4772 17.2975 21.8427 13.3536C21.7816 13.3121 21.7099 13.3184 21.6408 13.3184C20.2664 13.3181 18.892 13.3215 17.5176 13.3159C17.3403 13.3151 17.2796 13.3922 17.2309 13.5481C16.6475 15.4138 15.4238 16.6462 13.5549 17.2262C13.3714 17.2832 13.3153 17.3684 13.3167 17.5557C13.3248 18.6489 13.3204 19.7422 13.3202 20.8823Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'polar',
            label: 'Polar area',
            icon: `<svg width="16" height="20" viewBox="0 0 17 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.11311 2.21675V0.0862831L7.01264 0.0256737C9.05995 -0.11242 10.9639 0.306736 12.7255 1.27911C14.5149 2.26644 15.7907 3.51894 16.5786 5.01078L17 5.80836L15.3587 6.9387C15.9263 8.13955 16.215 9.47549 16.215 10.9485C16.215 12.6092 15.8484 14.0951 15.1278 15.4112L14.6314 16.317L13.778 15.7628C13.1574 15.3587 12.5362 14.9554 11.9145 14.553C11.5402 14.9532 11.0688 15.3536 10.4954 15.7489C9.75652 16.2564 8.93775 16.6001 8.03723 16.7749V20L6.97317 19.8828C5.51948 19.7219 4.28034 19.3484 3.25186 18.7763C2.18395 18.1823 1.25363 17.2427 0.481078 15.9366L0 15.1211L2.5043 13.3978C2.34558 12.7959 2.26477 12.1453 2.26477 11.4451C2.26477 10.5134 2.51587 9.65924 3.0248 8.88449C2.36002 8.47227 1.78566 8.12366 1.30364 7.8366L0.596484 7.41645L0.883219 6.62783C1.45083 5.06342 3.01327 3.0928 6.11311 2.21675ZM6.11311 13.3015L2.65153 15.6843C3.09984 16.2643 3.60206 16.7153 4.16391 17.0272C4.7325 17.343 5.38289 17.5784 6.11311 17.7364V13.3015ZM8.03723 12.053V14.7387C8.53852 14.6016 9.0022 14.3881 9.42745 14.0951C9.73533 13.8835 10.0057 13.676 10.2375 13.4683C9.50451 12.9959 8.77107 12.5241 8.03723 12.053ZM13.7385 8.05311L9.73823 10.8064C11.1207 11.6946 12.501 12.5863 13.879 13.4813C14.1551 12.7035 14.2908 11.8593 14.2908 10.9485C14.2908 9.89563 14.109 8.92916 13.7385 8.05311ZM6.11311 10.8253C5.63516 10.521 5.15636 10.2181 4.67672 9.91649C4.35441 10.3763 4.18894 10.8849 4.18894 11.4451C4.18894 11.7093 4.20337 11.9626 4.23412 12.2079L6.11311 10.9137V10.8253ZM8.03723 9.58967L14.4111 5.2025C13.7866 4.35824 12.9188 3.6381 11.8182 3.03125C10.6368 2.37866 9.37645 2.033 8.03723 1.99128V9.58967ZM6.11311 4.29566C4.58147 4.83795 3.59531 5.71799 3.04884 6.58808C3.87914 7.09264 4.89989 7.72831 6.11311 8.49416V4.29566Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'radar',
            label: 'Radar',
            icon: `<svg width="20" height="20" viewBox="0 0 22 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.7219 7.30723L11.4406 0.557226C11.3128 0.463574 11.1585 0.413086 11 0.413086C10.8415 0.413086 10.6872 0.463574 10.5594 0.557226L1.27811 7.30723C1.14994 7.40041 1.05459 7.5318 1.00575 7.68255C0.956901 7.8333 0.957074 7.99565 1.00624 8.14629L4.55233 19.0682C4.60128 19.2186 4.69656 19.3497 4.82453 19.4428C4.9525 19.5358 5.10662 19.586 5.26483 19.5861H16.7375C17.0633 19.5861 17.3492 19.3775 17.45 19.0682L20.9961 8.14629C21.0945 7.83691 20.9844 7.49941 20.7219 7.30723ZM18.6547 7.77363L16.3461 8.52363L11.6586 5.13223V2.68535L18.6547 7.77363ZM9.92186 11.2939L7.83358 14.1604L6.53983 10.1947L9.92186 11.2939ZM7.19608 9.0252L10.3437 6.74941V10.0494L7.19608 9.0252ZM11 12.0439L13.2008 15.065H8.79921L11 12.0439ZM11.6586 6.74941L14.8039 9.0252L11.6586 10.0471V6.74941ZM12.0781 11.2939L15.4601 10.1947L14.1664 14.1604L12.0781 11.2939ZM10.3437 2.68535V5.13223L5.6539 8.52363L3.3453 7.77363L10.3437 2.68535ZM2.96796 9.03457L4.9953 9.69316L6.87968 15.4682L5.61874 17.2002L2.96796 9.03457ZM6.6664 17.9924L7.8453 16.3752H14.157L15.3359 17.9924H6.6664ZM16.3812 17.2002L15.1203 15.4682L17.0047 9.69316L19.032 9.03457L16.3812 17.2002Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'hbar',
            label: 'Horizontal bar',
            icon: `<svg width="20" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.5 5V2H2V5H6.5ZM12.5 12.5V9.5H2V12.5H12.5ZM20 20H2V17H20V20ZM21.5 17C21.5 16.6022 21.342 16.2206 21.0607 15.9393C20.7794 15.658 20.3978 15.5 20 15.5H2C1.60217 15.5 1.22065 15.658 0.939341 15.9393C0.658035 16.2206 0.5 16.6022 0.5 17V20C0.5 20.3978 0.658035 20.7794 0.939341 21.0607C1.22065 21.342 1.60217 21.5 2 21.5H20C20.3978 21.5 20.7794 21.342 21.0607 21.0607C21.342 20.7794 21.5 20.3978 21.5 20V17ZM12.5 8C12.8978 8 13.2794 8.15804 13.5607 8.43934C13.842 8.72064 14 9.10217 14 9.5V12.5C14 12.8978 13.842 13.2794 13.5607 13.5607C13.2794 13.842 12.8978 14 12.5 14H2C1.60217 14 1.22065 13.842 0.939341 13.5607C0.658035 13.2794 0.5 12.8978 0.5 12.5V9.5C0.5 9.10217 0.658035 8.72064 0.939341 8.43934C1.22065 8.15804 1.60217 8 2 8H12.5ZM6.5 0.5C6.89783 0.5 7.27936 0.658035 7.56066 0.93934C7.84196 1.22064 8 1.60218 8 2V5C8 5.39782 7.84196 5.77936 7.56066 6.06066C7.27936 6.34196 6.89783 6.5 6.5 6.5H2C1.60217 6.5 1.22065 6.34196 0.939341 6.06066C0.658035 5.77936 0.5 5.39782 0.5 5V2C0.5 1.60218 0.658035 1.22064 0.939341 0.93934C1.22065 0.658035 1.60217 0.5 2 0.5H6.5Z" fill="black"/>
</svg>
`,
          },
          {
            type: 'shbar',
            label: 'Stacked Horizontal bar',
            icon: `<svg width="19" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.9375 20.25C13.3517 20.25 13.6875 19.9142 13.6875 19.5V17.25C13.6875 16.8358 13.3517 16.5 12.9375 16.5H1.5C1.08578 16.5 0.75 16.8358 0.75 17.25V19.5C0.75 19.9142 1.08579 20.25 1.5 20.25H12.9375ZM19.5 20.25C19.9142 20.25 20.25 19.9142 20.25 19.5V17.25C20.25 16.8358 19.9142 16.5 19.5 16.5H17.25C16.8358 16.5 16.5 16.8358 16.5 17.25V19.5C16.5 19.9142 16.8358 20.25 17.25 20.25H19.5ZM15.5625 12.375C15.9767 12.375 16.3125 12.0392 16.3125 11.625V9.375C16.3125 8.96079 15.9767 8.625 15.5625 8.625H13.3125C12.8983 8.625 12.5625 8.96079 12.5625 9.375V11.625C12.5625 12.0392 12.8983 12.375 13.3125 12.375H15.5625ZM11.625 4.5C12.0392 4.5 12.375 4.16421 12.375 3.75V1.5C12.375 1.08579 12.0392 0.75 11.625 0.75H9.375C8.96079 0.75 8.625 1.08579 8.625 1.5V3.75C8.625 4.16421 8.96079 4.5 9.375 4.5H11.625ZM5.0625 4.5C5.47671 4.5 5.8125 4.16421 5.8125 3.75V1.5C5.8125 1.08579 5.47671 0.75 5.0625 0.75H1.5C1.08579 0.75 0.75 1.08579 0.75 1.5V3.75C0.75 4.16421 1.08579 4.5 1.5 4.5H5.0625ZM9 12.375C9.41421 12.375 9.75 12.0392 9.75 11.625V9.375C9.75 8.96079 9.41421 8.625 9 8.625H1.5C1.08579 8.625 0.75 8.96079 0.75 9.375V11.625C0.75 12.0392 1.08579 12.375 1.5 12.375H9Z" stroke="black" stroke-width="1.5"/>
</svg>
`,
          },
          {
            type: 'svbar',
            label: 'Stacked vertical bar',
            icon: `<svg width="19" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.25 8.0625C20.25 7.64829 19.9142 7.3125 19.5 7.3125H17.25C16.8358 7.3125 16.5 7.64829 16.5 8.0625V19.5C16.5 19.9142 16.8358 20.25 17.25 20.25H19.5C19.9142 20.25 20.25 19.9142 20.25 19.5V8.0625ZM20.25 1.5C20.25 1.08579 19.9142 0.75 19.5 0.75H17.25C16.8358 0.75 16.5 1.08579 16.5 1.5V3.75C16.5 4.16421 16.8358 4.5 17.25 4.5H19.5C19.9142 4.5 20.25 4.16421 20.25 3.75V1.5ZM12.375 5.4375C12.375 5.02329 12.0392 4.6875 11.625 4.6875H9.375C8.96079 4.6875 8.625 5.02329 8.625 5.4375V7.6875C8.625 8.10171 8.96079 8.4375 9.375 8.4375H11.625C12.0392 8.4375 12.375 8.10171 12.375 7.6875V5.4375ZM4.5 9.375C4.5 8.96079 4.16421 8.625 3.75 8.625H1.5C1.08579 8.625 0.75 8.96079 0.75 9.375V11.625C0.75 12.0392 1.08579 12.375 1.5 12.375H3.75C4.16421 12.375 4.5 12.0392 4.5 11.625V9.375ZM4.5 15.9375C4.5 15.5233 4.16421 15.1875 3.75 15.1875H1.5C1.08579 15.1875 0.75 15.5233 0.75 15.9375V19.5C0.75 19.9142 1.08579 20.25 1.5 20.25H3.75C4.16421 20.25 4.5 19.9142 4.5 19.5V15.9375ZM12.375 12C12.375 11.5858 12.0392 11.25 11.625 11.25H9.375C8.96079 11.25 8.625 11.5858 8.625 12V19.5C8.625 19.9142 8.96079 20.25 9.375 20.25H11.625C12.0392 20.25 12.375 19.9142 12.375 19.5V12Z" stroke="black" stroke-width="1.5"/>
</svg>
`,
          },
          {
            type: 'line',
            label: 'Line',
            icon: `<svg width="18" height="19" viewBox="0 0 20 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.718797 18.7965C0.622401 18.776 0.530988 18.7367 0.449785 18.6809C0.368582 18.625 0.299181 18.5537 0.245548 18.471C0.191915 18.3884 0.155102 18.2959 0.137214 18.199C0.119326 18.1021 0.120713 18.0026 0.141297 17.9062L2.88255 4.93873L4.5828 11.8822L6.02505 7.99123L8.71005 10.7962L11.623 0.969727L13.8235 9.77023L15.2935 8.63773L19.246 17.4427C19.2863 17.5326 19.3084 17.6296 19.3112 17.7281C19.3139 17.8266 19.2973 17.9246 19.2621 18.0167C19.227 18.1087 19.1741 18.1929 19.1064 18.2645C19.0387 18.3361 18.9576 18.3936 18.8677 18.4339C18.7778 18.4741 18.6808 18.4962 18.5823 18.499C18.4838 18.5017 18.3858 18.4851 18.2937 18.4499C18.2017 18.4148 18.1175 18.3619 18.0459 18.2942C17.9743 18.2265 17.9168 18.1454 17.8765 18.0555L14.704 10.9845L12.9235 12.354L11.5015 6.65698L9.4143 13.7017L6.59805 10.7587L4.28805 16.9942L2.99055 11.682L1.6083 18.2145C1.58823 18.3112 1.54924 18.403 1.49358 18.4846C1.43792 18.5663 1.36668 18.6361 1.28396 18.6901C1.20124 18.7441 1.10866 18.7812 1.01154 18.7994C0.914424 18.8175 0.814683 18.8163 0.718047 18.7957L0.718797 18.7965Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'bar-chart',
            label: 'Bar Chart',
            icon: `<svg width="20" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5 15.5H2V20H5V15.5ZM12.5 9.5H9.5V20H12.5V9.5ZM20 2V20H17V2H20ZM17 0.5C16.6022 0.5 16.2206 0.658035 15.9393 0.93934C15.658 1.22064 15.5 1.60218 15.5 2V20C15.5 20.3978 15.658 20.7794 15.9393 21.0607C16.2206 21.342 16.6022 21.5 17 21.5H20C20.3978 21.5 20.7794 21.342 21.0607 21.0607C21.342 20.7794 21.5 20.3978 21.5 20V2C21.5 1.60218 21.342 1.22064 21.0607 0.93934C20.7794 0.658035 20.3978 0.5 20 0.5H17ZM8 9.5C8 9.10217 8.15804 8.72064 8.43934 8.43934C8.72064 8.15804 9.10217 8 9.5 8H12.5C12.8978 8 13.2794 8.15804 13.5607 8.43934C13.842 8.72064 14 9.10217 14 9.5V20C14 20.3978 13.842 20.7794 13.5607 21.0607C13.2794 21.342 12.8978 21.5 12.5 21.5H9.5C9.10217 21.5 8.72064 21.342 8.43934 21.0607C8.15804 20.7794 8 20.3978 8 20V9.5ZM0.5 15.5C0.5 15.1022 0.658035 14.7206 0.93934 14.4393C1.22064 14.158 1.60218 14 2 14H5C5.39782 14 5.77936 14.158 6.06066 14.4393C6.34196 14.7206 6.5 15.1022 6.5 15.5V20C6.5 20.3978 6.34196 20.7794 6.06066 21.0607C5.77936 21.342 5.39782 21.5 5 21.5H2C1.60218 21.5 1.22064 21.342 0.93934 21.0607C0.658035 20.7794 0.5 20.3978 0.5 20V15.5Z" fill="black"/>
</svg>
`,
          },
        ],
      },
      {
        category: 'Assets',
        value: '4',
        items: [
          {
            type: 'image',
            label: 'Image',
            icon: `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 18C1.45 18 0.979333 17.8043 0.588 17.413C0.196667 17.0217 0.000666667 16.5507 0 16V2C0 1.45 0.196 0.979333 0.588 0.588C0.98 0.196667 1.45067 0.000666667 2 0H16C16.55 0 17.021 0.196 17.413 0.588C17.805 0.98 18.0007 1.45067 18 2V16C18 16.55 17.8043 17.021 17.413 17.413C17.0217 17.805 16.5507 18.0007 16 18H2ZM2 16H16V2H2V16ZM4 14H14C14.2 14 14.35 13.9083 14.45 13.725C14.55 13.5417 14.5333 13.3667 14.4 13.2L11.65 9.525C11.55 9.39167 11.4167 9.325 11.25 9.325C11.0833 9.325 10.95 9.39167 10.85 9.525L8.25 13L6.4 10.525C6.3 10.3917 6.16667 10.325 6 10.325C5.83333 10.325 5.7 10.3917 5.6 10.525L3.6 13.2C3.46667 13.3667 3.45 13.5417 3.55 13.725C3.65 13.9083 3.8 14 4 14Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'video',
            label: 'Video',
            icon: `<svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M18 1.00268e-07C18.5046 -0.000159579 18.9906 0.190406 19.3605 0.533497C19.7305 0.876588 19.9572 1.34684 19.995 1.85L20 2V16C20.0002 16.5046 19.8096 16.9906 19.4665 17.3605C19.1234 17.7305 18.6532 17.9572 18.15 17.995L18 18H2C1.49542 18.0002 1.00943 17.8096 0.639452 17.4665C0.269471 17.1234 0.0428434 16.6532 0.00500021 16.15L1.00268e-07 16V2C-0.000159579 1.49542 0.190406 1.00943 0.533497 0.639452C0.876588 0.269471 1.34684 0.0428434 1.85 0.00500021L2 1.00268e-07H18ZM18 2H2V16H18V2ZM8.34 4.638L8.858 4.868L9.196 5.028L9.583 5.218L10.013 5.436L10.483 5.686L10.99 5.966L11.256 6.118L11.774 6.423L12.248 6.715L12.678 6.988L13.058 7.241L13.538 7.571L13.902 7.834L13.997 7.904C14.1513 8.01883 14.2767 8.16816 14.363 8.34005C14.4494 8.51194 14.4943 8.70164 14.4943 8.894C14.4943 9.08636 14.4494 9.27606 14.363 9.44795C14.2767 9.61984 14.1513 9.76917 13.997 9.884L13.674 10.119L13.234 10.427L12.878 10.666L12.473 10.929L12.02 11.212L11.521 11.512L10.987 11.821L10.478 12.103L10.007 12.353L9.577 12.573L9.191 12.761L8.569 13.049L8.339 13.149C8.16242 13.2251 7.97051 13.2589 7.77856 13.2476C7.58662 13.2364 7.39995 13.1805 7.23346 13.0843C7.06696 12.9881 6.92524 12.8544 6.8196 12.6937C6.71396 12.5331 6.64732 12.35 6.625 12.159L6.567 11.594L6.535 11.22L6.493 10.556L6.47 10.048L6.455 9.493L6.451 9.199L6.449 8.894C6.449 8.68733 6.451 8.48733 6.455 8.294L6.47 7.739L6.493 7.232L6.52 6.775L6.55 6.374L6.625 5.63C6.64719 5.43882 6.71376 5.25547 6.81939 5.09458C6.92502 4.93369 7.0668 4.79972 7.2334 4.70335C7.4 4.60698 7.58682 4.55089 7.77896 4.53954C7.97109 4.5282 8.16321 4.56191 8.34 4.638ZM8.951 7.139L8.515 6.921L8.486 7.408L8.464 7.959L8.451 8.569L8.449 8.894L8.451 9.219L8.464 9.828L8.474 10.111L8.5 10.631L8.515 10.866L8.949 10.648L9.436 10.392L9.971 10.098L10.255 9.936L10.806 9.61L11.3 9.304L11.736 9.024L11.932 8.894L11.525 8.624L11.059 8.33C10.7938 8.16584 10.5261 8.00582 10.256 7.85L9.973 7.689L9.439 7.395L8.951 7.139Z" fill="#323232"/>
</svg>
`,
          },
        ],
      },

      // {
      //   category: 'Status',
      //   items: [
      //     {
      //       type: 'pg-bar',
      //       label: 'Progress bar',
      //       icon: `/assets/images/svgs/page-builder/progress.svg`,
      //     },
      //     {
      //       type: 'primeng-rating',
      //       label: 'Rating',
      //       icon: '/assets/images/svgs/page-builder/rating.svg',
      //     },
      //     {
      //       type: 'primeng-slider',
      //       label: 'Slider',
      //       icon: '/assets/images/svgs/page-builder/slider.svg',
      //     },
      //     {
      //       type: 'primeng-tag',
      //       label: 'Tag',
      //       icon: '/assets/images/svgs/page-builder/tag.svg',
      //     },
      //   ],
      // },
      /*  {
        category: 'Advanced',
        items: [
          {
            type: 'primeng-btn',
            label: 'Button',
            icon: '/assets/images/svgs/page-builder/button.svg',
          },
          {
            type: 'mat-btn',
            label: 'Material Button',
            icon: '/assets/images/svgs/page-builder/button.svg',
          },
          {
            type: 'primeng-dropdown',
            label: 'Dropdown',
            icon: '/assets/images/svgs/page-builder/dropdown.svg',
          },

          {
            type: 'map',
            label: 'Map',
            icon: `/assets/images/svgs/page-builder/map.svg`,
          },
          {
            type: 'primeng-editor',
            label: 'Editor',
            icon: '/assets/images/svgs/page-builder/button.svg',
          },
        ],
      }, */

      {
        category: 'Others',
        value: '5',
        items: [
          {
            type: 'map',
            label: 'Map',
            icon: `<svg width="18" height="21" viewBox="0 0 18 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M9.0001 9.19941C9.63662 9.19941 10.2471 8.94656 10.6972 8.49647C11.1472 8.04638 11.4001 7.43593 11.4001 6.79941C11.4001 6.16289 11.1472 5.55245 10.6972 5.10236C10.2471 4.65227 9.63662 4.39941 9.0001 4.39941C8.36358 4.39941 7.75313 4.65227 7.30304 5.10236C6.85295 5.55245 6.6001 6.16289 6.6001 6.79941C6.6001 7.43593 6.85295 8.04638 7.30304 8.49647C7.75313 8.94656 8.36358 9.19941 9.0001 9.19941ZM9.0001 5.59941C9.31836 5.59941 9.62358 5.72584 9.84863 5.95089C10.0737 6.17593 10.2001 6.48115 10.2001 6.79941C10.2001 7.11767 10.0737 7.4229 9.84863 7.64794C9.62358 7.87299 9.31836 7.99941 9.0001 7.99941C8.68184 7.99941 8.37661 7.87299 8.15157 7.64794C7.92653 7.4229 7.8001 7.11767 7.8001 6.79941C7.8001 6.48115 7.92653 6.17593 8.15157 5.95089C8.37661 5.72584 8.68184 5.59941 9.0001 5.59941Z" fill="#323232"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M3.6001 6.543C3.6001 9.7506 6.7837 15.1998 9.0001 15.1998C11.2177 15.1998 14.4001 9.7506 14.4001 6.543C14.4001 3.3798 11.9917 0.799805 9.0001 0.799805C6.0085 0.799805 3.6001 3.3798 3.6001 6.543ZM13.2001 6.543C13.2001 9.1746 10.3825 13.9998 9.0001 13.9998C7.6189 13.9998 4.8001 9.17581 4.8001 6.543C4.8001 4.0242 6.6901 1.9998 9.0001 1.9998C11.3101 1.9998 13.2001 4.0242 13.2001 6.543Z" fill="#323232"/>
<path d="M13.122 9.96822C12.9786 9.90648 12.8648 9.79123 12.805 9.64695C12.7451 9.50268 12.7439 9.34075 12.8016 9.19559C12.8592 9.05043 12.9712 8.93347 13.1137 8.86958C13.2563 8.80568 13.4181 8.79989 13.5648 8.85342C14.0528 9.04696 14.4925 9.34488 14.8532 9.7263C15.2139 10.1077 15.4868 10.5634 15.6528 11.0614L17.2536 15.8614C17.4342 16.4028 17.4834 16.9793 17.3973 17.5434C17.3112 18.1076 17.0922 18.6432 16.7584 19.106C16.4246 19.5689 15.9855 19.9457 15.4774 20.2055C14.9693 20.4653 14.4067 20.6006 13.836 20.6002H4.16403C3.59357 20.6002 3.03126 20.4647 2.52347 20.2047C2.01568 19.9448 1.57693 19.5678 1.2434 19.105C0.90986 18.6422 0.691083 18.1068 0.605096 17.5429C0.519109 16.9789 0.568375 16.4026 0.748832 15.8614L2.34843 11.0614C2.51734 10.5545 2.79697 10.0915 3.16705 9.70605C3.53713 9.32061 3.98837 9.02239 4.48803 8.83302C4.5617 8.80505 4.64016 8.79186 4.71893 8.79421C4.7977 8.79656 4.87523 8.8144 4.9471 8.84672C5.01898 8.87903 5.08378 8.92519 5.13782 8.98255C5.19185 9.03991 5.23406 9.10735 5.26203 9.18102C5.29 9.25469 5.30319 9.33315 5.30084 9.41192C5.29849 9.49069 5.28065 9.56822 5.24833 9.64009C5.21602 9.71197 5.16986 9.77677 5.1125 9.8308C5.05514 9.88484 4.9877 9.92705 4.91403 9.95502C4.5805 10.0812 4.27928 10.2801 4.03226 10.5373C3.78525 10.7945 3.59865 11.1035 3.48603 11.4418L1.88643 16.2418C1.76626 16.6026 1.73355 16.9868 1.79099 17.3627C1.84843 17.7387 1.99438 18.0955 2.21681 18.404C2.43924 18.7124 2.73179 18.9636 3.07033 19.1368C3.40888 19.31 3.78375 19.4003 4.16403 19.4002H13.8384C14.2188 19.4002 14.5936 19.3098 14.9321 19.1364C15.2707 18.9631 15.5631 18.7117 15.7855 18.4032C16.0078 18.0946 16.1536 17.7376 16.2108 17.3616C16.2681 16.9856 16.2352 16.6014 16.1148 16.2406L14.5164 11.4406C14.4057 11.1088 14.2237 10.8051 13.9832 10.551C13.7428 10.2969 13.4497 10.0984 13.1244 9.96942" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'tag',
            label: 'Tag',
            icon: `<svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2.82509 6.02539L6.70009 9.90039C6.88342 10.0837 6.97509 10.3171 6.97509 10.6004C6.97509 10.8837 6.88342 11.1171 6.70009 11.3004C6.51675 11.4837 6.28342 11.5754 6.00009 11.5754C5.71675 11.5754 5.48342 11.4837 5.30009 11.3004L0.700087 6.70039C0.600087 6.60039 0.529087 6.49206 0.487087 6.37539C0.445087 6.25872 0.424754 6.13372 0.426087 6.00039C0.42742 5.86706 0.44842 5.74206 0.489087 5.62539C0.529754 5.50872 0.60042 5.40039 0.701087 5.30039L5.30109 0.70039C5.50109 0.50039 5.73875 0.400391 6.01409 0.400391C6.28942 0.400391 6.52675 0.50039 6.72609 0.70039C6.92542 0.90039 7.02542 1.13806 7.02609 1.41339C7.02675 1.68872 6.92675 1.92606 6.72609 2.12539L2.82509 6.02539ZM17.1751 5.97539L13.3001 2.10039C13.1168 1.91706 13.0251 1.68372 13.0251 1.40039C13.0251 1.11706 13.1168 0.883724 13.3001 0.70039C13.4834 0.517057 13.7168 0.425391 14.0001 0.425391C14.2834 0.425391 14.5168 0.517057 14.7001 0.70039L19.3001 5.30039C19.4001 5.40039 19.4711 5.50872 19.5131 5.62539C19.5551 5.74206 19.5758 5.86706 19.5751 6.00039C19.5744 6.13372 19.5538 6.25872 19.5131 6.37539C19.4724 6.49206 19.4014 6.60039 19.3001 6.70039L14.7001 11.3004C14.5001 11.5004 14.2668 11.5964 14.0001 11.5884C13.7334 11.5804 13.5001 11.4761 13.3001 11.2754C13.1001 11.0747 13.0001 10.8374 13.0001 10.5634C13.0001 10.2894 13.1001 10.0517 13.3001 9.85039L17.1751 5.97539Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'date-tag',
            label: 'Date Tag',
            icon: `<svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2.82509 6.02539L6.70009 9.90039C6.88342 10.0837 6.97509 10.3171 6.97509 10.6004C6.97509 10.8837 6.88342 11.1171 6.70009 11.3004C6.51675 11.4837 6.28342 11.5754 6.00009 11.5754C5.71675 11.5754 5.48342 11.4837 5.30009 11.3004L0.700087 6.70039C0.600087 6.60039 0.529087 6.49206 0.487087 6.37539C0.445087 6.25872 0.424754 6.13372 0.426087 6.00039C0.42742 5.86706 0.44842 5.74206 0.489087 5.62539C0.529754 5.50872 0.60042 5.40039 0.701087 5.30039L5.30109 0.70039C5.50109 0.50039 5.73875 0.400391 6.01409 0.400391C6.28942 0.400391 6.52675 0.50039 6.72609 0.70039C6.92542 0.90039 7.02542 1.13806 7.02609 1.41339C7.02675 1.68872 6.92675 1.92606 6.72609 2.12539L2.82509 6.02539ZM17.1751 5.97539L13.3001 2.10039C13.1168 1.91706 13.0251 1.68372 13.0251 1.40039C13.0251 1.11706 13.1168 0.883724 13.3001 0.70039C13.4834 0.517057 13.7168 0.425391 14.0001 0.425391C14.2834 0.425391 14.5168 0.517057 14.7001 0.70039L19.3001 5.30039C19.4001 5.40039 19.4711 5.50872 19.5131 5.62539C19.5551 5.74206 19.5758 5.86706 19.5751 6.00039C19.5744 6.13372 19.5538 6.25872 19.5131 6.37539C19.4724 6.49206 19.4014 6.60039 19.3001 6.70039L14.7001 11.3004C14.5001 11.5004 14.2668 11.5964 14.0001 11.5884C13.7334 11.5804 13.5001 11.4761 13.3001 11.2754C13.1001 11.0747 13.0001 10.8374 13.0001 10.5634C13.0001 10.2894 13.1001 10.0517 13.3001 9.85039L17.1751 5.97539Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'location-tag',
            label: 'Location Tag',
            icon: `<svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2.82509 6.02539L6.70009 9.90039C6.88342 10.0837 6.97509 10.3171 6.97509 10.6004C6.97509 10.8837 6.88342 11.1171 6.70009 11.3004C6.51675 11.4837 6.28342 11.5754 6.00009 11.5754C5.71675 11.5754 5.48342 11.4837 5.30009 11.3004L0.700087 6.70039C0.600087 6.60039 0.529087 6.49206 0.487087 6.37539C0.445087 6.25872 0.424754 6.13372 0.426087 6.00039C0.42742 5.86706 0.44842 5.74206 0.489087 5.62539C0.529754 5.50872 0.60042 5.40039 0.701087 5.30039L5.30109 0.70039C5.50109 0.50039 5.73875 0.400391 6.01409 0.400391C6.28942 0.400391 6.52675 0.50039 6.72609 0.70039C6.92542 0.90039 7.02542 1.13806 7.02609 1.41339C7.02675 1.68872 6.92675 1.92606 6.72609 2.12539L2.82509 6.02539ZM17.1751 5.97539L13.3001 2.10039C13.1168 1.91706 13.0251 1.68372 13.0251 1.40039C13.0251 1.11706 13.1168 0.883724 13.3001 0.70039C13.4834 0.517057 13.7168 0.425391 14.0001 0.425391C14.2834 0.425391 14.5168 0.517057 14.7001 0.70039L19.3001 5.30039C19.4001 5.40039 19.4711 5.50872 19.5131 5.62539C19.5551 5.74206 19.5758 5.86706 19.5751 6.00039C19.5744 6.13372 19.5538 6.25872 19.5131 6.37539C19.4724 6.49206 19.4014 6.60039 19.3001 6.70039L14.7001 11.3004C14.5001 11.5004 14.2668 11.5964 14.0001 11.5884C13.7334 11.5804 13.5001 11.4761 13.3001 11.2754C13.1001 11.0747 13.0001 10.8374 13.0001 10.5634C13.0001 10.2894 13.1001 10.0517 13.3001 9.85039L17.1751 5.97539Z" fill="#323232"/>
</svg>
`,
          },
          {
            type: 'spacer',
            label: 'Spacer',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 7V5C3 3.9 3.9 3 5 3H7M17 3H19C20.1 3 21 3.9 21 5V7M21 17V19C21 20.1 20.1 21 19 21H17M7 21H5C3.9 21 3 20.1 3 19V17" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M13 7H8C7.44772 7 7 7.44772 7 8V11C7 11.5523 7.44772 12 8 12H13C13.5523 12 14 11.5523 14 11V8C14 7.44772 13.5523 7 13 7Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M16 12H11C10.4477 12 10 12.4477 10 13V16C10 16.5523 10.4477 17 11 17H16C16.5523 17 17 16.5523 17 16V13C17 12.4477 16.5523 12 16 12Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`,
          },
          {
            type: 'section',
            label: 'Section',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 7V5C3 3.9 3.9 3 5 3H7M17 3H19C20.1 3 21 3.9 21 5V7M21 17V19C21 20.1 20.1 21 19 21H17M7 21H5C3.9 21 3 20.1 3 19V17" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M13 7H8C7.44772 7 7 7.44772 7 8V11C7 11.5523 7.44772 12 8 12H13C13.5523 12 14 11.5523 14 11V8C14 7.44772 13.5523 7 13 7Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M16 12H11C10.4477 12 10 12.4477 10 13V16C10 16.5523 10.4477 17 11 17H16C16.5523 17 17 16.5523 17 16V13C17 12.4477 16.5523 12 16 12Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`,
          },

          {
            type: 'divider',
            label: 'Divider',
            icon: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <line x1="12" y1="4" x2="12" y2="20" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

`,
          },
          {
            type: 'guage',
            label: 'Guage',
            icon: `<svg width="20" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 7V5C3 3.9 3.9 3 5 3H7M17 3H19C20.1 3 21 3.9 21 5V7M21 17V19C21 20.1 20.1 21 19 21H17M7 21H5C3.9 21 3 20.1 3 19V17" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M13 7H8C7.44772 7 7 7.44772 7 8V11C7 11.5523 7.44772 12 8 12H13C13.5523 12 14 11.5523 14 11V8C14 7.44772 13.5523 7 13 7Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M16 12H11C10.4477 12 10 12.4477 10 13V16C10 16.5523 10.4477 17 11 17H16C16.5523 17 17 16.5523 17 16V13C17 12.4477 16.5523 12 16 12Z" stroke="#323232" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`,
          },
        ],
      },
    ];
  }

  getFonts(): fontFamily[] {
    return [
      { label: 'Manifapro', value: 'manifapro' },
      { label: 'Manifapro Italic', value: 'manifapro-italic' },
      { label: 'Ghawar', value: 'ghawar' },
      { label: 'Segoe UI', value: 'segoe' },
      { label: 'Trebuchet', value: 'trebuchet' },
      { label: 'Arial', value: 'Arial, Helvetica, sans-serif' },
      { label: 'Arial Black', value: 'Arial Black, Gadget, sans-serif' },
      { label: 'Brush Script MT', value: 'Brush Script MT, sans-serif' },
      { label: 'Comic Sans MS', value: 'Comic Sans MS, cursive, sans-serif' },
      { label: 'Courier New', value: 'Courier New, Courier, monospace' },
      { label: 'Georgia', value: 'Georgia, serif' },
      { label: 'Helvetica', value: 'Helvetica, sans-serif' },
      { label: 'Times New Roman', value: 'Times New Roman, Times, serif' },
      { label: 'Verdana', value: 'Verdana, Geneva, sans-serif' },
    ];
  }

  getWeights(): fontWeight[] {
    return [
      { label: 'Thin', value: '100' },
      { label: 'Extra-Light', value: '200' },
      { label: 'Light', value: '300' },
      { label: 'Normal', value: '400' },
      { label: 'Medium', value: '500' },
      { label: 'Semi-Bold', value: '600' },
      { label: 'Bold', value: '700' },
      { label: 'Extra-Bold', value: '800' },
      { label: 'Ultra-Bold', value: '900' },
    ];
  }

  getJustfyOptions(): justifyOption[] {
    return [
      { icon: 'pi pi-align-left', justify: 'Left' },
      { icon: 'pi pi-align-right', justify: 'Right' },
      { icon: 'pi pi-align-center', justify: 'Center' },
      { icon: 'pi pi-align-justify', justify: 'Justify' },
    ];
  }


  /**
   * Fetches the list of apps.
   *
   * @returns An Observable of the response containing all the apps.
   * @throws {Error} Throws an error if the request fails or times out.
   */
  getApps(): Observable<any> {
    return this.http.get(this.get_app_list).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    )
  }

  /**
   * Fetches the list of orgs by application id.
   *
   * @param {string} appId - Application Id.
   * @returns An Observable of the response containing all the orgs for the application id provided.
   * @throws {Error} Throws an error if the request fails or times out.
   */
  getOrgsByApp(appId: string): Observable<any> {
    return this.http.get(this.get_org_list_by_app + appId).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    )
  }

  /**
 * Fetches the list of orgs.
 *
 * @returns An Observable of the response containing all the orgs for the application id provided.
 * @throws {Error} Throws an error if the request fails or times out.
 */
  getOrgsWithoutByApp(): Observable<any> {
    return this.http.get(this.get_org_list).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    )
  }

  /**
 * Fetches the list of entity.
 *
 * @returns An Observable of the response containing entity data.
 * @param {any} payload - payload to specify the type of the feature
 * @throws {Error} Throws an error if the request fails or times out.
 */
  getEntityList(payload: any): Observable<any> {
    return this.http.post(this.get_entity_list, payload).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
 * Sends a GET request to fetch the details of particular entity.
 * @param {any} entityId - entity id to get the details of particular entity.
 * @returns {Observable<any>} - An Observable that emits the server's response or throws an error in case of a failure.
 */
  getEntityDetailsById(entityId: string): Observable<any> {
    return this.http.get(this.get_entity_details + entityId).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
 * Sends a POST request to create a Input Data Template.
 *
 * @param {any} payload - The data to be sent in the POST request for creating the Input Data Template .
 * @returns {Observable<any>} - An Observable that emits the server's response or throws an error in case of a failure.
 *
 * */
  postWidgetMapping(payload: any): Observable<any> {
    console.log(payload);
    return this.http.post(this.post_widget_mapping, payload).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  updateEmitterMapping(payload: any): Observable<any> {
    console.log(payload);
    return this.http.post(this.update_emitter_mapping, payload).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
  * Fetches the list of attributes.
  *
  * @returns An Observable of the response containing attributes data.
  * @param {any} payload - payload to specify the type of the feature
  * @throws {Error} Throws an error if the request fails or times out.
  */
  getAttrList(payload?: any): Observable<any> {
    return this.http.post(this.get_attribute_list, payload).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
 * Fetches the list of templates.
 *
 * @returns An Observable of the response containing all templates.
 * @throws {Error} Throws an error if the request fails or times out.
 */
  getTemplateList(paylaod: any): Observable<any> {
    return this.http.post(this.get_template_list, paylaod).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
  * Fetches the template detail by Id.
  *
  * @returns An Observable of the response containing all IDTs.
  * @param {string} id - Id to be get the Input Data Template.
  * @throws {Error} Throws an error if the request fails or times out.
  */
  getTemplateByID(id: string): Observable<any> {
    return this.http.get(this.get_template_list + id).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
* Fetches the list of IDTs.
*
* @returns An Observable of the response containing all IDTs.
* @param {any} paylaod - payload to be get the idt.
* @throws {Error} Throws an error if the request fails or times out.
*/
  getIdt(paylaod: any): Observable<any> {
    return this.http.post(this.get_idt_list, paylaod).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
  * Fetches the list of IDTs versions.
  * @returns An Observable of the response containing all IDTs versions.
  * @param {any} paylaod - payload to be get the idt.
  * @throws {Error} Throws an error if the request fails or times out.
  */
  getIdtVersions(paylaod: any) {
    return this.http.post(this.get_idt_versions, paylaod).pipe(
      map((res: any) => {
        return res;
      }),
      timeout(20000),
      catchError((err) => {
        throw err;
      })
    );
  }

  /**
  * Sends a POST request to delete a notification.
  * Calls the http post method from base api service
  * @param {any} pageData - The data to be sent in the POST request for creating the page.
  * @returns {Observable<any>} - An Observable that emits the server's response or throws an error in case of a failure.
  */
  savePage(pageData: any): Observable<any> {
    return this.post<any>(API_ENDPOINTS.PAGE_ADMIN.CREATE_PAGE, pageData)
  }


  /**
* Sends a POST request to generate Response from LLM.
*
* @param {any} payload - The data to be sent in the POST request for generating Response .
* @returns {Observable<any>} - An Observable that emits the server's response or throws an error in case of a failure.
* @throws {Error} Throws an error if the request fails or times out.
*
* */
  postPrompt(payload: any): Observable<any> {
    return this.http.post<any>(this.baseUrl + API_ENDPOINTS.LLM.queryPrompt, payload);
  }


}
